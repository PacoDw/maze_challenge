# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 1m
  # which dirs to skip: they won't be analyzed;
  skip-dirs-use-default: true
linters-settings:
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 0
  funlen:
    lines: 200
    statements: 80
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 30
  gocritic:
    enabled-tags:
      - diagnostic
      - style
      - performance
      - experimental
      - opinionated
  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-arounds that should be removed before merging
  govet:
    check-shadowing: false
  golint:
    min-confidence: 0
  maligned:
    suggest-new: true
  depguard:
    list-type: blacklist
    packages:
      # logging is allowed only by logutils.Log, logrus
      # is allowed to use only in logutils package
      - github.com/sirupsen/logrus
  misspell:
    locale: US
  nestif:
    # minimal complexity of if statements to report, 5 by default
    min-complexity: 7
  gomnd:
    settings:
      mnd:
        # don't include the "operation" and "assign"
        checks: case,return
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 140
  whitespace:
    multi-if: true   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: true # Enforces newlines (or comments) after every multi-line function signature
linters:
  disable-all: true
  enable:
    - asciicheck # - Simple linter to check that your code does not contain non-ASCII identifiers
    - bodyclose # - checks whether HTTP response body is closed successfully
    - deadcode # - Finds unused code
    - depguard # - Go linter that checks if package imports are in a list of acceptable packages
    - dogsled # - Checks assignments with too many blank identifiers (e.g. x, , , _, := f())
    - dupl # - Tool for code clone detection
    - errcheck # - Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - errorlint # - go-errorlint is a source code linter for Go software that can be used to find code that will cause problemswith the error wrapping scheme introduced in Go 1.13.
    - exhaustive # - check exhaustiveness of enum switch statements
    - exportloopref # - checks for pointers to enclosing loop variables
    - forbidigo # - Forbids identifiers
    - funlen # - Tool for detection of long functions
    - gci # - Gci control golang package import order and make it always deterministic.
    - gocognit # - Computes and checks the cognitive complexity of functions
    - goconst # - Finds repeated strings that could be replaced by a constant
    - gocritic # - The most opinionated Go source code linter
    - godot # - Check if comments end in a period
    - godox # - Tool for detection of FIXME, TODO and other comment keywords
    - gofmt # - Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - goheader # - Checks is file header matches to pattern
    - goimports # - Goimports does everything that gofmt does. Additionally it checks unused imports
    - golint # - Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    - gomnd # - An analyzer to detect magic numbers.
    - gomodguard # - Allow and block list linter for direct Go module dependencies.
    - goprintffuncname # - Checks that printf-like functions are named with f at the end
    - gosec # - Inspects source code for security problems
    - gosimple # - Linter for Go source code that specializes in simplifying a code
    - govet # - Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # - Detects when assignments to existing variables are not used
    - interfacer # - Linter that suggests narrower interface types
    - lll # - Reports long lines
    - makezero # - Finds slice declarations with non-zero initial length
    - maligned # - Tool to detect Go structs that would take less memory if their fields were sorted
    - misspell # - Finds commonly misspelled English words in comments
    - nakedret # - Finds naked returns in functions greater than a specified function length
    - nlreturn # - nlreturn checks for a new line before return and branch statements to increase code clarity
    - noctx # - noctx finds sending http request without context.Context
    - nolintlint # - Reports ill-formed or insufficient nolint directives
    - prealloc # - Finds slice declarations that could potentially be preallocated
    - predeclared # - find code that shadows one of Go's predeclared identifiers
    - rowserrcheck # - checks whether Err of rows is checked successfully
    - scopelint # - Scopelint checks for unpinned variables in go programs
    - sqlclosecheck # - Checks that sql.Rows and sql.Stmt are closed.
    - staticcheck # - Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - structcheck # - Finds unused struct fields
    - stylecheck # - Stylecheck is a replacement for golint
    - testpackage # - linter that makes you use a separate _test package
    - thelper # - thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - tparallel # - tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - typecheck # - Like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert # - Remove unnecessary type conversions
    - unused # - Checks Go code for unused constants, variables, functions and types
    - varcheck # - Finds unused global variables and constants
    - whitespace # - Tool for detection of leading and trailing whitespace
    - wsl # - Whitespace Linter - Forces you to use empty lines!

    # enable once the error wrapping is implemented
    # - wrapcheck # - Checks that errors returned from external packages are wrapped
    # - goerr113 # - this will be available untile error handling is implemented - Golang linter to check the errors handling expressions
  
  # don't enable:
    # - exhaustivestruct # - Checks if all struct's fields are initialized
    # - gochecknoglobals # - check that no global variables exist, so we need globar variables on graphql
    # - gochecknoinits # we need the init function for the provider
    # - gocyclo # we already have funlen lint
    # - gofumpt # - Gofumpt checks whether code was gofumpt-ed.
    # - nestif # - Reports deeply nested if statements
    # - paralleltest # - paralleltest detects missing usage of t.Parallel() method in your Go tes
    # - unparam # Forces to create global variables when one variable is repeated in different functions
issues:
  exclude-rules:
    - path: _test\.go
      linters:
        - testpackage
        - lll
    - path: repository
      linters:
        - dogsled
        - maligned
        - errorlint
    - path: resolvers
      linters:
        - gocognit
        - gocritic

